-*- mode: org; mode: visual-line; -*-
#+STARTUP: indent

* Clojure for Node for Max
** Introduction

This is a simple project for bringing up a ClojureScript network REPL to talk to Max 8 via a Node.js sub-process. This means that Max can be live-coded in ClojureScript, at least to the extent that the =node.script= instance in Max is connected to interesting things in the patcher (via inlets, outlets, named dictionaries). We describe the support for CIDER inside Emacs, although other IDE toolchains are available and should work.

** Background

Max has a library object called =node.script= which can fire up a Node.js process and attach it to the enclosing patcher document, so that the patcher can run Javascript code, and the Javascript code can manipulate things in the Max world.

Figwheel Main is a set of libraries which equips a Javascript client (a web browser, or Node.js) with a network connection to a Figwheel server; the latter runs in Clojure (on the JVM), hosts the ClojureScript cross-compiler, and supports a REPL (read-eval-print loop). When everything's running, ClojureScript can be live-coded via the server, which compiles everything to Javascript and sends it through to the client. The server also tracks changes to source files, uploading code to the client as required.

When everything is running, the setup looks like this:

- Max with an instance of =node.script= and a Node.js process attached to it
- A Figwheel Main server, which Max's Node.js attaches to
- Emacs (or equivalent), attached to the server for live coding via CIDER

Most of this machinery is invisible (so in particular, the user code in ClojureScript for Max needs to know nothing about live coding support); Figwheel and CIDER augment the code automatically to tie everything together.

** Setup

- To start, pure Node.js - no Max involvement yet
- Following instructions: [[https://lambdaisland.com/blog/2017-05-02-nodejs-scripts-clojurescript]] - the Node.js section

** Compile and Run: First Shot (=first-shot=)

A very simple setup without any REPL support. Latest Clojure and ClojureScript.

- =project.clj= is set up to compile from =src-cljs= into =main.js=
- Compile using =lein cljsbuild once=
- Run with =node main.js=
- To avoid confusion, we've removed the =src= directory used by default for (Java) Clojure source

** First Figwheel (=figwheel-test=)

- First test with "classic" Figwheel, under Leiningen: REPL works.

** First Figwheel Main (=figwheel-main-test=)

- First test with Figwheel Main, under Leiningen. REPL works.

** Figwheel Main By Hand (=hand-thrown=)

- Another Figwheel Main setup, using CLI Tools rather than Leiningen, to simplify the setup, make it closer to the Figwheel Main documentation, make the configuration more explicit, and maybe have a better chance to get a network REPL off the ground.

** Issues

- =lein cljsbuild once= seems to be busted; use =lein cljsbuild auto= instead
- Don't need to set up =target= in CLASSPATH: we don't have a web server that needs access to compiled JS
